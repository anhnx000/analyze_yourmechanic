import streamlit as st
import pandas as pd
import time
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
from scraper_advanced import YourMechanicAdvancedScraper
import json

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="YourMechanic Price Analyzer",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .service-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    .price-metric {
        background: #f0f2f6;
        border-radius: 10px;
        padding: 1rem;
        text-align: center;
    }
    .sidebar-info {
        background: #e6f3ff;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #1f77b4;
    }
</style>
""", unsafe_allow_html=True)

def init_session_state():
    """Kh·ªüi t·∫°o session state"""
    if 'scraper' not in st.session_state:
        st.session_state.scraper = YourMechanicAdvancedScraper()
    if 'search_history' not in st.session_state:
        st.session_state.search_history = []
    if 'comparison_list' not in st.session_state:
        st.session_state.comparison_list = []

def display_header():
    """Hi·ªÉn th·ªã header"""
    st.markdown('<h1 class="main-header">üîß YourMechanic Price Analyzer</h1>', unsafe_allow_html=True)
    st.markdown("---")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.info("üìä **So s√°nh gi√° d·ªãch v·ª•**")
    with col2:
        st.success("üéØ **∆Ø·ªõc t√≠nh ch√≠nh x√°c**")
    with col3:
        st.warning("üöó **Theo t·ª´ng lo·∫°i xe**")
    with col4:
        st.error("üìç **Theo khu v·ª±c**")

def sidebar_vehicle_info():
    """Sidebar cho th√¥ng tin xe"""
    st.sidebar.markdown('<div class="sidebar-info"><h3>üöó Th√¥ng tin xe c·ªßa b·∫°n</h3></div>', unsafe_allow_html=True)
    
    # Ki·ªÉm tra k·∫øt n·ªëi
    if st.sidebar.button("üîÑ Ki·ªÉm tra k·∫øt n·ªëi"):
        with st.sidebar:
            with st.spinner("ƒêang ki·ªÉm tra..."):
                health = st.session_state.scraper.health_check()
                if health:
                    st.success("‚úÖ K·∫øt n·ªëi t·ªët!")
                else:
                    st.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi")
    
    # NƒÉm s·∫£n xu·∫•t
    current_year = datetime.now().year
    years = list(range(current_year, 1990, -1))
    selected_year = st.sidebar.selectbox(
        "üìÖ NƒÉm s·∫£n xu·∫•t", 
        years, 
        index=4,
        help="Ch·ªçn nƒÉm s·∫£n xu·∫•t c·ªßa xe"
    )
    
    # H√£ng xe
    try:
        car_makes = st.session_state.scraper.get_vehicle_makes()
    except:
        car_makes = [
            "Toyota", "Honda", "Ford", "Chevrolet", "Nissan", "BMW", "Mercedes-Benz",
            "Audi", "Volkswagen", "Hyundai", "Kia", "Mazda", "Subaru", "Lexus"
        ]
    
    selected_make = st.sidebar.selectbox("üè≠ H√£ng xe", car_makes)
    
    # Model xe
    models_by_make = {
        "Toyota": ["Camry", "Corolla", "RAV4", "Highlander", "Prius", "Tacoma", "4Runner", "Sienna"],
        "Honda": ["Civic", "Accord", "CR-V", "Pilot", "Fit", "Ridgeline", "Odyssey", "HR-V"],
        "Ford": ["F-150", "Focus", "Escape", "Explorer", "Mustang", "Edge", "Fusion", "Expedition"],
        "Chevrolet": ["Silverado", "Equinox", "Malibu", "Tahoe", "Cruze", "Traverse", "Impala", "Suburban"],
        "Nissan": ["Altima", "Sentra", "Rogue", "Pathfinder", "Maxima", "Titan", "Murano", "Versa"],
        "BMW": ["3 Series", "5 Series", "X3", "X5", "7 Series", "X1", "4 Series", "2 Series"],
        "Mercedes-Benz": ["C-Class", "E-Class", "S-Class", "GLC", "GLE", "A-Class", "CLA", "GLS"]
    }
    
    available_models = models_by_make.get(selected_make, ["Camry", "Accord", "F-150", "Silverado"])
    selected_model = st.sidebar.selectbox("üöô Model", available_models)
    
    # M√£ ZIP
    zip_code = st.sidebar.text_input(
        "üìç M√£ ZIP", 
        value="10001", 
        help="Nh·∫≠p m√£ ZIP ƒë·ªÉ xem gi√° t·∫°i khu v·ª±c c·ªßa b·∫°n",
        max_chars=5
    )
    
    # Hi·ªÉn th·ªã th√¥ng tin xe ƒë√£ ch·ªçn
    st.sidebar.markdown("---")
    st.sidebar.markdown("**Xe ƒë√£ ch·ªçn:**")
    st.sidebar.info(f"üöó {selected_year} {selected_make} {selected_model}")
    st.sidebar.info(f"üìç Khu v·ª±c: {zip_code}")
    
    return selected_year, selected_make, selected_model, zip_code

def service_selection():
    """Giao di·ªán ch·ªçn d·ªãch v·ª•"""
    st.header("üìã Ch·ªçn d·ªãch v·ª• c·∫ßn b√°o gi√°")
    
    # L·∫•y danh m·ª•c d·ªãch v·ª•
    try:
        categories = st.session_state.scraper.get_service_categories_from_website()
    except:
        categories = st.session_state.scraper._get_fallback_categories()
    
    # Tab cho c√°c danh m·ª•c
    category_tabs = st.tabs(list(categories.keys()))
    selected_services = []
    
    for i, (category_name, services) in enumerate(categories.items()):
        with category_tabs[i]:
            st.subheader(f"{category_name} Services")
            
            # Checkbox cho t·ª´ng d·ªãch v·ª•
            for service in services:
                col1, col2 = st.columns([3, 1])
                with col1:
                    if st.checkbox(service, key=f"service_{category_name}_{service}"):
                        selected_services.append(service)
                with col2:
                    if st.button("‚ÑπÔ∏è", key=f"info_{category_name}_{service}", help="Th√¥ng tin d·ªãch v·ª•"):
                        st.info(f"D·ªãch v·ª•: {service}")
    
    return selected_services

def price_analysis(results, vehicle_info):
    """Ph√¢n t√≠ch v√† hi·ªÉn th·ªã gi√°"""
    if not results:
        return
    
    st.header("üí∞ Ph√¢n t√≠ch gi√° d·ªãch v·ª•")
    
    # T·∫°o DataFrame
    df = pd.DataFrame(results)
    
    # Metrics t·ªïng quan
    col1, col2, col3, col4 = st.columns(4)
    
    total_min = df['min_price'].sum()
    total_max = df['max_price'].sum()
    total_avg = df['avg_price'].sum()
    service_count = len(df)
    
    with col1:
        st.metric("üîß S·ªë d·ªãch v·ª•", service_count)
    with col2:
        st.metric("üíµ Chi ph√≠ th·∫•p nh·∫•t", f"${total_min:,}")
    with col3:
        st.metric("üí∞ Chi ph√≠ trung b√¨nh", f"${total_avg:,}")
    with col4:
        st.metric("üí∏ Chi ph√≠ cao nh·∫•t", f"${total_max:,}")
    
    # Bi·ªÉu ƒë·ªì so s√°nh gi√°
    col1, col2 = st.columns(2)
    
    with col1:
        # Bar chart cho t·ª´ng d·ªãch v·ª•
        fig_bar = px.bar(
            df, 
            x='service', 
            y=['min_price', 'avg_price', 'max_price'],
            title="So s√°nh gi√° c√°c d·ªãch v·ª•",
            labels={'value': 'Gi√° ($)', 'variable': 'Lo·∫°i gi√°'},
            color_discrete_map={
                'min_price': '#90EE90',
                'avg_price': '#FFD700', 
                'max_price': '#FF6B6B'
            }
        )
        fig_bar.update_xaxes(tickangle=45)
        st.plotly_chart(fig_bar, use_container_width=True)
    
    with col2:
        # Pie chart ph√¢n b·ªë chi ph√≠
        fig_pie = px.pie(
            df,
            values='avg_price',
            names='service',
            title="Ph√¢n b·ªë chi ph√≠ theo d·ªãch v·ª•"
        )
        st.plotly_chart(fig_pie, use_container_width=True)
    
    # B·∫£ng chi ti·∫øt
    st.subheader("üìä Chi ti·∫øt b√°o gi√°")
    
    display_df = df.copy()
    display_df['Gi√° th·∫•p nh·∫•t'] = display_df['min_price'].apply(lambda x: f"${x:,}")
    display_df['Gi√° trung b√¨nh'] = display_df['avg_price'].apply(lambda x: f"${x:,}")
    display_df['Gi√° cao nh·∫•t'] = display_df['max_price'].apply(lambda x: f"${x:,}")
    
    final_df = display_df[['service', 'Gi√° th·∫•p nh·∫•t', 'Gi√° trung b√¨nh', 'Gi√° cao nh·∫•t', 'labor_time']].copy()
    final_df.columns = ['D·ªãch v·ª•', 'Gi√° th·∫•p nh·∫•t', 'Gi√° trung b√¨nh', 'Gi√° cao nh·∫•t', 'Th·ªùi gian ∆∞·ªõc t√≠nh']
    
    st.dataframe(final_df, use_container_width=True)
    
    # N√∫t th√™m v√†o so s√°nh
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üìã L∆∞u v√†o l·ªãch s·ª≠"):
            st.session_state.search_history.append({
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'vehicle': f"{vehicle_info[0]} {vehicle_info[1]} {vehicle_info[2]}",
                'services': len(results),
                'total_cost': total_avg,
                'results': results
            })
            st.success("‚úÖ ƒê√£ l∆∞u v√†o l·ªãch s·ª≠!")
    
    with col2:
        if st.button("üîÑ So s√°nh v·ªõi t√¨m ki·∫øm kh√°c"):
            st.session_state.comparison_list.extend(results)
            st.success("‚úÖ ƒê√£ th√™m v√†o danh s√°ch so s√°nh!")
    
    with col3:
        # Xu·∫•t CSV
        csv = final_df.to_csv(index=False)
        st.download_button(
            label="üì• T·∫£i xu·ªëng CSV",
            data=csv,
            file_name=f"yourmechanic_quotes_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime='text/csv'
        )

def search_history():
    """Hi·ªÉn th·ªã l·ªãch s·ª≠ t√¨m ki·∫øm"""
    if not st.session_state.search_history:
        st.info("üìù Ch∆∞a c√≥ l·ªãch s·ª≠ t√¨m ki·∫øm n√†o.")
        return
    
    st.header("üìö L·ªãch s·ª≠ t√¨m ki·∫øm")
    
    for i, search in enumerate(reversed(st.session_state.search_history)):
        with st.expander(f"üîç {search['timestamp']} - {search['vehicle']} ({search['services']} d·ªãch v·ª•)"):
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**Xe:** {search['vehicle']}")
                st.write(f"**S·ªë d·ªãch v·ª•:** {search['services']}")
            with col2:
                st.write(f"**T·ªïng chi ph√≠ TB:** ${search['total_cost']:,}")
                
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            if st.button(f"üëÅÔ∏è Xem chi ti·∫øt", key=f"view_{i}"):
                df = pd.DataFrame(search['results'])
                st.dataframe(df[['service', 'avg_price', 'labor_time']])

def main():
    """H√†m ch√≠nh"""
    init_session_state()
    display_header()
    
    # Sidebar
    vehicle_info = sidebar_vehicle_info()
    selected_year, selected_make, selected_model, zip_code = vehicle_info
    
    # Main tabs
    tab1, tab2, tab3 = st.tabs(["üîç T√¨m ki·∫øm gi√°", "üìä So s√°nh", "üìö L·ªãch s·ª≠"])
    
    with tab1:
        # Ch·ªçn d·ªãch v·ª•
        selected_services = service_selection()
        
        # N√∫t t√¨m ki·∫øm
        if st.button("üîç L·∫•y b√°o gi√° ngay", type="primary", use_container_width=True):
            if not selected_services:
                st.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt d·ªãch v·ª•!")
            else:
                with st.spinner("üîÑ ƒêang t√¨m ki·∫øm gi√° t·ª´ YourMechanic..."):
                    results = []
                    progress_bar = st.progress(0)
                    
                    for i, service in enumerate(selected_services):
                        try:
                            pricing_info = st.session_state.scraper.search_service_pricing(
                                service, zip_code, str(selected_year), selected_make, selected_model
                            )
                            results.append(pricing_info)
                            progress_bar.progress((i + 1) / len(selected_services))
                            time.sleep(0.3)  # Tr√°nh qu√° t·∫£i server
                        except Exception as e:
                            st.error(f"‚ùå L·ªói khi l·∫•y gi√° cho {service}: {str(e)}")
                    
                    if results:
                        st.success(f"‚úÖ T√¨m th·∫•y {len(results)} b√°o gi√°!")
                        price_analysis(results, vehicle_info)
    
    with tab2:
        st.header("üîÑ So s√°nh gi√° d·ªãch v·ª•")
        if st.session_state.comparison_list:
            df_compare = pd.DataFrame(st.session_state.comparison_list)
            
            # Bi·ªÉu ƒë·ªì so s√°nh
            fig = px.scatter(
                df_compare,
                x='service',
                y='avg_price',
                size='max_price',
                color='vehicle',
                title="So s√°nh gi√° trung b√¨nh c√°c d·ªãch v·ª•",
                hover_data=['min_price', 'max_price', 'labor_time']
            )
            fig.update_xaxes(tickangle=45)
            st.plotly_chart(fig, use_container_width=True)
            
            # B·∫£ng so s√°nh
            st.dataframe(df_compare[['service', 'vehicle', 'avg_price', 'labor_time']])
            
            if st.button("üóëÔ∏è X√≥a danh s√°ch so s√°nh"):
                st.session_state.comparison_list = []
                st.experimental_rerun()
        else:
            st.info("üìù Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ so s√°nh. H√£y th·ª±c hi·ªán t√¨m ki·∫øm v√† th√™m v√†o so s√°nh.")
    
    with tab3:
        search_history()
    
    # Footer
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üìû Li√™n h·ªá YourMechanic:**")
        st.write("Hotline: (844) 997-3624")
        st.write("Email: hi@yourmechanic.com")
    
    with col2:
        st.markdown("**üïí Gi·ªù ho·∫°t ƒë·ªông:**")
        st.write("T2-T6: 6AM-5PM PST")
        st.write("T7-CN: 7AM-4PM PST")
    
    with col3:
        st.markdown("**‚ÑπÔ∏è L∆∞u √Ω:**")
        st.write("Gi√° c√≥ th·ªÉ thay ƒë·ªïi theo")
        st.write("t√¨nh tr·∫°ng xe th·ª±c t·∫ø")

if __name__ == "__main__":
    main() 
