import streamlit as st
import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
import re
from typing import Dict, List, Optional
import json

class YourMechanicScraper:
    def __init__(self):
        self.base_url = "https://www.yourmechanic.com"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        
    def get_service_categories(self) -> Dict[str, List[str]]:
        """Tr·∫£ v·ªÅ danh s√°ch c√°c danh m·ª•c d·ªãch v·ª• d·ª±a tr√™n c·∫•u tr√∫c trang web"""
        categories = {
            "Battery": [
                "Auxiliary Battery Replacement",
                "Car Battery Cable Replacement", 
                "Car Battery Replacement",
                "Service Battery/cables"
            ],
            "Belts": [
                "Car AC Belt Replacement",
                "Alternator / Serpentine Belt Replacement",
                "Drive Belt Tensioner Replacement",
                "Power Steering Belt Replacement",
                "Serpentine/Drive Belt Replacement",
                "Supercharger Belt Replacement",
                "Timing Belt Replacement"
            ],
            "Brakes": [
                "ABS Speed Sensor Replacement",
                "Brake Caliper Replacement",
                "Brake Drum Replacement",
                "Brake Hose Replacement",
                "Brake Master Cylinder Replacement",
                "Brake Pad Replacement",
                "Brake Rotors/Discs Replacement",
                "Brake Shoe Replacement (Rear)",
                "Brake System Flush"
            ],
            "Car Buying": [
                "Pre-purchase Car Inspection"
            ],
            "Clutch & Transmission": [
                "CV Axle / Shaft Assembly Replacement",
                "Axle Shaft Seal Replacement",
                "Clutch Cable Replacement",
                "Clutch Fluid Replacement",
                "Clutch Master Cylinder & Slave Cylinder Replacement",
                "Transmission Fluid Service",
                "Transfer Case Fluid Replacement"
            ],
            "Diagnostics": [
                "75 Point Safety Inspection",
                "ABS Light is on Inspection",
                "AC is not working Inspection",
                "Battery Light is on Inspection",
                "Brake Warning Light is on Inspection",
                "Car is not starting Inspection",
                "Check Engine Light is on Inspection",
                "Oil Change"
            ],
            "Engine": [
                "Air Filter Replacement",
                "Cabin Air Filter Replacement",
                "Catalytic Converter Replacement",
                "Engine Oil and Filter Change",
                "Fuel Filter Replacement",
                "Oil Change",
                "Spark Plug Replacement"
            ],
            "Suspension & Steering": [
                "Air Shock Replacement",
                "Ball Joint Replacement (Front)",
                "Control Arm Assembly Replacement",
                "Power Steering Fluid Service",
                "Power Steering Pump Replacement",
                "Shock Absorber Replacement",
                "Strut Assembly Replacement"
            ]
        }
        return categories
    
    def search_service_url(self, service_name: str) -> Optional[str]:
        """T√¨m URL cho d·ªãch v·ª• c·ª• th·ªÉ"""
        # T·∫°o URL d·ª± ki·∫øn d·ª±a tr√™n t√™n d·ªãch v·ª•
        service_slug = service_name.lower().replace(" ", "-").replace("/", "-").replace("(", "").replace(")", "")
        service_slug = re.sub(r'-+', '-', service_slug)  # Lo·∫°i b·ªè d·∫•u g·∫°ch ngang k√©p
        potential_urls = [
            f"{self.base_url}/services/{service_slug}",
            f"{self.base_url}/services/{service_slug}-service",
            f"{self.base_url}/services/{service_slug.replace('-replacement', '')}"
        ]
        
        for url in potential_urls:
            try:
                response = self.session.get(url, timeout=10)
                if response.status_code == 200:
                    return url
            except:
                continue
        return None
    
    def get_service_pricing(self, service_name: str, zip_code: str = "10001", 
                          year: str = "2020", make: str = "Toyota", model: str = "Camry") -> Dict:
        """L·∫•y th√¥ng tin gi√° cho d·ªãch v·ª• c·ª• th·ªÉ"""
        
        # M√¥ ph·ªèng d·ªØ li·ªáu gi√° (v√¨ c·∫ßn ph√°t tri·ªÉn scraper th·ª±c t·∫ø)
        base_prices = {
            "Oil Change": {"min": 50, "max": 80, "avg": 65},
            "Brake Pad Replacement": {"min": 120, "max": 250, "avg": 185},
            "Car Battery Replacement": {"min": 80, "max": 200, "avg": 140},
            "Pre-purchase Car Inspection": {"min": 90, "max": 120, "avg": 105},
            "Timing Belt Replacement": {"min": 400, "max": 800, "avg": 600},
            "Transmission Fluid Service": {"min": 80, "max": 150, "avg": 115},
            "Brake System Flush": {"min": 70, "max": 120, "avg": 95},
            "Air Filter Replacement": {"min": 25, "max": 60, "avg": 42},
            "Spark Plug Replacement": {"min": 80, "max": 200, "avg": 140}
        }
        
        # L·∫•y gi√° c∆° b·∫£n ho·∫∑c t·∫°o gi√° ∆∞·ªõc t√≠nh
        if service_name in base_prices:
            pricing = base_prices[service_name]
        else:
            # T·∫°o gi√° ∆∞·ªõc t√≠nh d·ª±a tr√™n lo·∫°i d·ªãch v·ª•
            if "replacement" in service_name.lower():
                pricing = {"min": 100, "max": 300, "avg": 200}
            elif "inspection" in service_name.lower():
                pricing = {"min": 80, "max": 150, "avg": 115}
            elif "fluid" in service_name.lower() or "service" in service_name.lower():
                pricing = {"min": 60, "max": 120, "avg": 90}
            else:
                pricing = {"min": 75, "max": 200, "avg": 137}
        
        # ƒêi·ªÅu ch·ªânh gi√° theo nƒÉm xe (xe c≈© h∆°n c√≥ th·ªÉ r·∫ª h∆°n ho·∫∑c ƒë·∫Øt h∆°n)
        year_int = int(year) if year.isdigit() else 2020
        if year_int < 2010:
            multiplier = 1.1  # Xe c≈© c√≥ th·ªÉ ƒë·∫Øt h∆°n do kh√≥ t√¨m ph·ª• t√πng
        elif year_int > 2020:
            multiplier = 1.2  # Xe m·ªõi ƒë·∫Øt h∆°n
        else:
            multiplier = 1.0
            
        return {
            "service": service_name,
            "vehicle": f"{year} {make} {model}",
            "location": zip_code,
            "min_price": int(pricing["min"] * multiplier),
            "max_price": int(pricing["max"] * multiplier),
            "avg_price": int(pricing["avg"] * multiplier),
            "labor_time": f"{pricing['avg'] // 50}-{pricing['avg'] // 30} hours",
            "parts_included": "Varies by service"
        }

def main():
    st.set_page_config(
        page_title="YourMechanic Price Checker",
        page_icon="üîß",
        layout="wide"
    )
    
    st.title("üîß YourMechanic Service Price Checker")
    st.markdown("Ki·ªÉm tra gi√° d·ªãch v·ª• s·ª≠a ch·ªØa √¥ t√¥ t·ª´ YourMechanic.com")
    
    # Kh·ªüi t·∫°o scraper
    if 'scraper' not in st.session_state:
        st.session_state.scraper = YourMechanicScraper()
    
    scraper = st.session_state.scraper
    
    # Sidebar cho th√¥ng tin xe
    st.sidebar.header("üöó Th√¥ng tin xe c·ªßa b·∫°n")
    
    # NƒÉm s·∫£n xu·∫•t
    current_year = 2024
    years = list(range(current_year, 1990, -1))
    selected_year = st.sidebar.selectbox("NƒÉm s·∫£n xu·∫•t", years, index=4)  # M·∫∑c ƒë·ªãnh 2020
    
    # H√£ng xe ph·ªï bi·∫øn
    car_makes = [
        "Toyota", "Honda", "Ford", "Chevrolet", "Nissan", "BMW", "Mercedes-Benz",
        "Audi", "Volkswagen", "Hyundai", "Kia", "Mazda", "Subaru", "Lexus",
        "Acura", "Infiniti", "Buick", "Cadillac", "GMC", "Jeep", "Ram", "Dodge"
    ]
    selected_make = st.sidebar.selectbox("H√£ng xe", car_makes)
    
    # Model xe (ƒë∆°n gi·∫£n h√≥a)
    models_by_make = {
        "Toyota": ["Camry", "Corolla", "RAV4", "Highlander", "Prius", "Tacoma"],
        "Honda": ["Civic", "Accord", "CR-V", "Pilot", "Fit", "Ridgeline"],
        "Ford": ["F-150", "Focus", "Escape", "Explorer", "Mustang", "Edge"],
        "Chevrolet": ["Silverado", "Equinox", "Malibu", "Tahoe", "Cruze", "Traverse"]
    }
    
    available_models = models_by_make.get(selected_make, ["Model kh√°c"])
    selected_model = st.sidebar.selectbox("Model", available_models)
    
    # M√£ ZIP
    zip_code = st.sidebar.text_input("M√£ ZIP", value="10001", help="Nh·∫≠p m√£ ZIP ƒë·ªÉ xem gi√° t·∫°i khu v·ª±c c·ªßa b·∫°n")
    
    # Main content
    col1, col2 = st.columns([1, 2])
    
    with col1:
        st.header("üìã Danh m·ª•c d·ªãch v·ª•")
        categories = scraper.get_service_categories()
        
        selected_category = st.selectbox("Ch·ªçn danh m·ª•c:", list(categories.keys()))
        
        if selected_category:
            st.subheader(f"D·ªãch v·ª• trong {selected_category}")
            services_in_category = categories[selected_category]
            
            selected_services = []
            for service in services_in_category:
                if st.checkbox(service, key=f"service_{service}"):
                    selected_services.append(service)
    
    with col2:
        st.header("üí∞ B√°o gi√° d·ªãch v·ª•")
        
        if st.button("üîç L·∫•y b√°o gi√°", type="primary"):
            if not selected_services:
                st.warning("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt d·ªãch v·ª•!")
            else:
                with st.spinner("ƒêang t√¨m ki·∫øm gi√°..."):
                    results = []
                    
                    for service in selected_services:
                        try:
                            pricing_info = scraper.get_service_pricing(
                                service, zip_code, str(selected_year), selected_make, selected_model
                            )
                            results.append(pricing_info)
                            time.sleep(0.5)  # Tr√°nh qu√° t·∫£i server
                        except Exception as e:
                            st.error(f"L·ªói khi l·∫•y gi√° cho {service}: {str(e)}")
                    
                    if results:
                        st.success(f"T√¨m th·∫•y {len(results)} b√°o gi√°!")
                        
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng b·∫£ng
                        df = pd.DataFrame(results)
                        
                        # ƒê·ªãnh d·∫°ng c·ªôt gi√°
                        df['Gi√° th·∫•p nh·∫•t'] = df['min_price'].apply(lambda x: f"${x:,}")
                        df['Gi√° cao nh·∫•t'] = df['max_price'].apply(lambda x: f"${x:,}")
                        df['Gi√° trung b√¨nh'] = df['avg_price'].apply(lambda x: f"${x:,}")
                        
                        # Ch·ªçn c·ªôt ƒë·ªÉ hi·ªÉn th·ªã
                        display_df = df[['service', 'Gi√° th·∫•p nh·∫•t', 'Gi√° trung b√¨nh', 'Gi√° cao nh·∫•t', 'labor_time']].copy()
                        display_df.columns = ['D·ªãch v·ª•', 'Gi√° th·∫•p nh·∫•t', 'Gi√° trung b√¨nh', 'Gi√° cao nh·∫•t', 'Th·ªùi gian ∆∞·ªõc t√≠nh']
                        
                        st.dataframe(display_df, use_container_width=True)
                        
                        # T·ªïng k·∫øt
                        total_min = sum([r['min_price'] for r in results])
                        total_max = sum([r['max_price'] for r in results])
                        total_avg = sum([r['avg_price'] for r in results])
                        
                        st.subheader("üìä T·ªïng k·∫øt")
                        col_a, col_b, col_c = st.columns(3)
                        
                        with col_a:
                            st.metric("T·ªïng chi ph√≠ th·∫•p nh·∫•t", f"${total_min:,}")
                        with col_b:
                            st.metric("T·ªïng chi ph√≠ trung b√¨nh", f"${total_avg:,}")
                        with col_c:
                            st.metric("T·ªïng chi ph√≠ cao nh·∫•t", f"${total_max:,}")
                        
                        # L∆∞u k·∫øt qu·∫£
                        st.session_state.last_results = results

    # Footer
    st.markdown("---")
    st.markdown("**L∆∞u √Ω:** Gi√° c√≥ th·ªÉ thay ƒë·ªïi t√πy theo t√¨nh tr·∫°ng xe v√† y√™u c·∫ßu c·ª• th·ªÉ. Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi YourMechanic ƒë·ªÉ c√≥ b√°o gi√° ch√≠nh x√°c nh·∫•t.")
    
    # Th√¥ng tin li√™n h·ªá YourMechanic
    with st.expander("üìû Th√¥ng tin li√™n h·ªá YourMechanic"):
        st.write("**Hotline:** (844) 997-3624")
        st.write("**Email:** hi@yourmechanic.com")
        st.write("**Website:** https://www.yourmechanic.com")
        st.write("**Gi·ªù ho·∫°t ƒë·ªông:**")
        st.write("- Th·ª© 2 - Th·ª© 6: 6 AM - 5 PM PST")
        st.write("- Th·ª© 7 - Ch·ªß nh·∫≠t: 7 AM - 4 PM PST")

if __name__ == "__main__":
    main() 
